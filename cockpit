{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"atmofuel","type":{"events":[],"methods":[]}},"2":{"name":"databank","type":{"events":[],"methods":[]}},"3":{"name":"telemeter","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"10":{"name":"slot11","type":{"events":[],"methods":[]}},"11":{"name":"slot12","type":{"events":[],"methods":[]}},"12":{"name":"slot13","type":{"events":[],"methods":[]}},"13":{"name":"slot14","type":{"events":[],"methods":[]}},"14":{"name":"slot15","type":{"events":[],"methods":[]}},"15":{"name":"slot16","type":{"events":[],"methods":[]}},"16":{"name":"slot17","type":{"events":[],"methods":[]}},"17":{"name":"slot18","type":{"events":[],"methods":[]}},"18":{"name":"slot19","type":{"events":[],"methods":[]}},"19":{"name":"slot20","type":{"events":[],"methods":[]}},"20":{"name":"slot21","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--UNIT START----------------\n\npitchInput = 0\nrollInput = 0\nyawInput = 0\nbrakeInput = 0\nshow_HUD = false --export: Show Custom HUD if checked, Vanilla HUD shown if unchecked\nHud_Opacity_percent=100 --export: Hud Opacity Percentage\nfont_size=3 --export: HUD font size factor\nline_size=1 --export HUD line size factor\nif show_HUD==true then hud_state = 1 else hud_state = 0 end\nopacity = Hud_Opacity_percent/100\nsy = system.getScreenHeight()\nsx = system.getScreenWidth()\nfscale=(sx/3840)*1000\nfsize = font_size/100\nlsize = line_size*100\n\nAuto_Pitch_Roll =  true --export: [Atmo Only] Activate auto pitch and roll if under set speeds\nAuto_pitch_speed = 50 --export: [Atmo Only] Set speed to engage auto pitch when under this speed\nAuto_roll_speed = 200 --export: [Atmo Only] Set speed to engage auto roll when under this speed\nif Auto_Pitch_Roll then\n    autostabspeed = Auto_pitch_speed\n    autorollspeed = Auto_roll_speed\n    else\n    autostabspeed = 0\n    autorollspeed = 0\nend\nslowcruise = 300 --export: [Atmo Only] Slow speed cruise\natmolimit = 1250 --export: [Atmo Only] Fast speed cruise, and max ship speed in Atmo\n\nautobrake = \"ON\"\nbrakeInput = brakeInput + 1\nstabilizer = \"OFF\"\nPitchDeg = 0\nRollDeg = 0\nstabilizerHold = 0\nhoverset = 0\nhovermax = 0\naltHold = \"OFF\"\n\nNitronPad = 0\nKergonPad = 0\ndividePoint = 0\nWarnPoint = 50 --export: Fuel warning level \nCriticalPoint = 25 --export: Fuel Critical level\n\nfuel_xpos = 2 --export: Fuel widget x position\nfuel_ypos = 30 --export: Fuel Widget y postion\nfuel_size = 15 --export: Fuel Widget scaling factor\nfuel_width = fuel_size\nfuel_height = fuel_size\n\nnNitron = 1 \nnTanks = 0 \n\n\nNav = Navigator.new(system, core, unit)\nNav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})\nNav.axisCommandManager:setTargetGroundAltitude(-1) --set ground altitude\n\nif hud_state==0 then\n    if antigrav ~= nil then antigrav.show() end\n    if warpdrive ~= nil then warpdrive.show() end\n    if shield ~= nil then shield.show() end\n    unit.hide()\n    else\n    unit.hide()\nend\n\ngearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean\nif gearExtended then\n    Nav.control.extendLandingGears()\nelse\n    Nav.control.retractLandingGears()\nend\n\n\nfunction svgInit(numNitron, numKergon)\n        \n        local returnsvg = [[<div style=\"\n            height:]]..fuel_height..[[%;\n            width:]]..fuel_width..[[%;\n            position:absolute;\n            top:]]..fuel_ypos..[[%;\n            left:]]..fuel_xpos..[[%;\n            text-align:center;\">\n\n            <svg height=\"100%\" width=\"100%\" stroke-width=\"]]..lsize/fscale..[[%\">            \n            <g fill=\"none\" opacity=\"]]..opacity..[[\" font-size=\"]]..(10*fsize*fscale/fuel_size)..[[%\" >\n            <rect x=\"0%\" y=\"0%\" rx=\"5%\" ry=\"5%\" width=\"100%\" height=\"100%\" fill=\"gray\" stroke=\"blue\" />]]   \n\n        if numNitron > 0 and numKergon == 0 then\n                dividePoint = 100\n                NitronPad = dividePoint/(3*numNitron + 1)\n                returnsvg = returnsvg..[[<text x=\"50%\" y=\"6%\" text-anchor=\"middle\"  fill=\"blue\">NITRON FUEL</text>]]\n                for i = 1, numNitron, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..NitronPad*i+2*NitronPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*NitronPad..[[%\" height=\"88%\" fill=\"none\" stroke=\"blue\">]]   \n\n                end\n        elseif numNitron > 0 and numKergon > 0 then\n                dividePoint = (100/(numNitron + numKergon))*numNitron\n                returnsvg = returnsvg..[[<line x1=\"]]..dividePoint..[[%\" x2=\"]]..dividePoint..[[%\" y1=\"0\" y2=\"100%\" stroke=\"white\"/>]]            \n                returnsvg = returnsvg..[[<text x=\"]]..(dividePoint/2)..[[%\" y=\"6%\"  text-anchor=\"middle\"  fill=\"white\">NITRON</text>]]\n                returnsvg = returnsvg..[[<text x=\"]]..(dividePoint+((100-dividePoint)/2))..[[%\" y=\"6%\" text-anchor=\"middle\"  fill=\"white\">KERGON</text>]]\n                NitronPad = dividePoint/(3*numNitron + 1)\n                for i = 1, numNitron, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..NitronPad*i+2*NitronPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*NitronPad..[[%\" height=\"88%\" stroke=\"blue\" fill=\"none\"/>]]   \n\n                end\n                KergonPad = (100-dividePoint)/(3*numKergon + 1)\n                for i = 1, numKergon, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..dividePoint + KergonPad*i+2*KergonPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*KergonPad..[[%\" height=\"88%\" stroke=\"yellow\" fill=\"none\"/>]]   \n                end\n        elseif numNitron == 0 and numKergon > 0 then\n                dividePoint = 0\n                returnsvg = returnsvg..[[<text x=\"50%\" y=\"5%\"  text-anchor=\"middle\"  fill=\"yellow\">KERGON FUEL</text>]]\n                                local padwidth = 50/(3*numNitron + 1)\n                KergonPad = (100-dividePoint)/(3*numKergon + 1)\n                for i = 1, numKergon, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..KergonPad*i+2*KergonPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*KergonPad..[[%\" height=\"88%\" stroke=\"yellow\" fill=\"none\"/>]]   \n                end\n        else\n        returnsvg = returnsvg..[[</g>]]\n        return returnsvg\n        end\n    return returnsvg    \nend\nsvgBase = svgInit(nNitron, nTanks - nNitron)\n\nfunction drawTankLevels(tanklist, nitroncount)\n         local returnsvg = [[<g fill=\"none\" opacity=\"]]..opacity..[[\" font-size=\"]]..(fsize*fscale*fuel_size/2)..[[%\">]]\n        for i,v in ipairs(tanklist) do\n                local tankpercent = v\n                fillColor = \"blue\"\n                kfillColor = \"yellow\"\n                if tankpercent <= CriticalPoint then\n                        fillColor = \"red\"\n                        kfillColor = \"red\"\n                elseif tankpercent > CriticalPoint and tankpercent <= WarnPoint then\n                        fillColor = \"orange\"\n                        kfillColor = \"orange\"\n                else\n                end\n                if i <= nitroncount then\n                    returnsvg = returnsvg..[[<rect x=\"]]..NitronPad*i+2*NitronPad*(i-1)..[[%\" y=\"]]..(96-((tankpercent/100)*88))..[[%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*NitronPad..[[%\" height=\"]]..(((tankpercent/100)*88))..[[%\" fill=\"]]..fillColor..[[\" stroke=\"none\"/>]]---]]..fillColor..[[\"/>]]\n                    returnsvg = returnsvg..[[<text x=\"]]..NitronPad*i+2*NitronPad*(i-1)+NitronPad..[[%\" y=\"]]..(96-((tankpercent/200)*88))..[[%\" text-anchor=\"middle\"  fill=\"white\">]]..tankpercent..[[%</text>]]\n                elseif i > nitroncount then\n                    returnsvg = returnsvg..[[<rect x=\"]]..dividePoint + KergonPad*(i-nitroncount)+2*KergonPad*((i-nitroncount)-1)..[[%\" y=\"]]..(96-((tankpercent/100)*88))..[[%\" rx=\"5%\" ry=\"5%\" width=\"]]..2*KergonPad..[[%\" height=\"]]..(((tankpercent/100)*88))..[[%\" fill=\"]]..kfillColor..[[\" stroke=\"none\"/>]]\n                    returnsvg = returnsvg..[[<text x=\"]]..dividePoint + KergonPad*(i-nitroncount)+2*KergonPad*((i-nitroncount)-1)+KergonPad..[[%\" y=\"]]..(96-((tankpercent/200)*88))..[[%\" text-anchor=\"middle\"  fill=\"blue\">]]..tankpercent..[[%</text>]]\n                  else\n                end\n        end\n        returnsvg = returnsvg..[[</g></svg></div>]]\n        return returnsvg\nend\n\nCruiseMode = \"Normal\"\nfunction ChangeCruise()\n    if CruiseMode == \"Normal\" then\n        CruiseMode = \"Slow\"\n        if unit.getControlMasterModeId()==0 then \n            unit.cancelCurrentControlMasterMode()\n            Nav:update()\n\n        end\n        Nav.axisCommandManager.axisCommands[0].targetSpeed = slowcruise\n        unit.setAxisCommandValue(0,slowcruise)\n    elseif CruiseMode == \"Slow\" then\n        CruiseMode = \"MaxSpeed\"\n        if unit.getControlMasterModeId()==0 then \n            unit.cancelCurrentControlMasterMode()\n            Nav:update()\n\n        end\n        Nav.axisCommandManager.axisCommands[0].targetSpeed = atmolimit\n               unit.setAxisCommandValue(0,atmolimit)\n    else\n        CruiseMode = \"Normal\"\n        if unit.getControlMasterModeId()==1 then\n            unit.cancelCurrentControlMasterMode()\n            Nav:update()\n            autobrake = \"OFF\"\n        end\n        Nav.axisCommandManager.axisCommands[0].throttle = 0\n        brakeInput = 0\n    end\nend\n\nfunction drawHorizon()\n    local xreturnsvg=\"\"\n    local returnatmo=\"\"\n    local brakestat=\"\"\n    local pitchsvg=\"\"\n    local rollsvg=\"\"\n    local ctrltxt = \"\"\n    local atmoctrl = \"\"\n    local speed = math.floor(3.6*vec3(core.getVelocity()):len())\n    local p = 0\n    local r = 0\n    local alt =\"\"\n    local coredata = json.decode(core.getData())\n    local gearExtended = (Nav.control.isAnyLandingGearExtended() == 1)\n    hoverset = Nav.axisCommandManager.targetGroundAltitude\n    hovermax = Nav.axisCommandManager.targetGroundAltitudeCapabilities[1]\n    local altHoldColor = \"blue\"\n    local pitchColor = \"white\"\n    local rollColor = \"white\"\n        \n       \n    if type(coredata.altitude)=='string' then \n        alt = \"Space\"\n        showatmo=false \n    else \n        alt = math.floor(coredata.altitude) \n        p=PitchDeg \n        r=RollDeg \n        showatmo=true \n    end  \n    if unit.getControlMasterModeId()==0 then\n        ctrltxt = [[<text x=\"62%\" y=\"49%\" text-anchor=\"end\" fill=\"white\" >Throttle: ]]..math.floor(100*unit.getAxisCommandValue(0))..[[%</text>\n        <text x=\"62%\" y=\"51.5%\" text-anchor=\"end\" fill=\"white\" >Mode: ]]..CruiseMode..[[</text>]]\n    else\n        ctrltxt = [[<text x=\"62%\" y=\"49%\" text-anchor=\"end\" fill=\"white\" >Cruise Set: ]]..math.floor(unit.getAxisCommandValue(0))..[[</text>\n        <text x=\"62%\" y=\"51.5%\" text-anchor=\"end\" fill=\"white\" >Mode: ]]..CruiseMode..[[</text>]]\n    end\n    ctrltxt = ctrltxt..[[\n    <text x=\"62%\" y=\"44%\" font-size=\"125%\" text-anchor=\"end\" fill=\"white\" >Speed: ]]..speed..[[</text>          \n    ]]\n    \n\n    if speed < autostabspeed and speed < autorollspeed and stabilizer ==\"OFF\" then \n        pitchColor = \"blue\"\n        rollColor = \"blue\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"34.5%\" y=\"50.5%\"  fill=\"blue\" text-anchor=\"end\" >Auto</text>\n        <text x=\"50%\" y=\"21.5%\" fill=\"blue\" text-anchor=\"middle\" >Auto</text>\n        ]]\n    elseif speed > autostabspeed and speed < autorollspeed and stabilizer ==\"OFF\" then \n        pitchColor = \"white\"\n        rollColor = \"blue\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"50%\" y=\"21%\" fill=\"blue\" text-anchor=\"middle\" >Auto</text>\n        ]]\n    elseif speed < autostabspeed and speed > autorollspeed and stabilizer ==\"OFF\" then \n        pitchColor = \"blue\"\n        rollColor = \"white\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"34.5%\" y=\"50.5%\"  fill=\"blue\" text-anchor=\"end\" >Auto</text>\n        ]]\n    elseif stabilizer ==\"ON\" and altHold == \"OFF\" then \n        rollColor = \"red\" \n        pitchColor = \"red\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"34.5%\" y=\"50.5%\"  fill=\"red\" text-anchor=\"end\" >Locked</text>\n        <text x=\"50%\" y=\"21.5%\" fill=\"red\" text-anchor=\"middle\" >Locked</text>   \n        ]]\n    elseif stabilizer ==\"ON\" and altHold == \"ON\" then \n        rollColor = \"red\" \n        pitchColor = \"blue\"\n        ctrltxt = ctrltxt..[[\n        <text x=\"34.5%\" y=\"50.5%\"  fill=\"blue\" text-anchor=\"end\" >Auto</text>\n        <text x=\"50%\" y=\"21.5%\" fill=\"red\" text-anchor=\"middle\" >Locked</text>   \n        ]]\n    else\n        rollColor = \"white\" \n        pitchColor = \"white\"\n    end\n    \n    if altHold == \"ON\" and showatmo==true then \n        altHoldColor = \"red\" \n        pitchColor = \"blue\"\n         ctrltxt = ctrltxt..[[\n        <text x=\"62%\" y=\"58%\" text-anchor=\"end\" fill=]]..altHoldColor..[[ font-size=\"100%\" stroke=\"white\">Hold: ]]..stabilizerHold..[[</text>\n        ]]\n    end\n    if (autobrake==\"ON\" or brakeInput > 0) then\n        ctrltxt= ctrltxt..[[\n        <text x=\"49%\" y=\"45%\" text-anchor=\"end\" fill=\"red\" stroke=\"white\" font-size=\"125%\" >BRAKE</text>\n        ]]\n        if autobrake==\"ON\" then\n            ctrltxt = ctrltxt..[[\n            <text x=\"51%\" y=\"45%\" text-anchor=\"start\" fill=\"red\" stroke=\"white\" font-size=\"125%\" >LOCKED</text>        \n            ]]\n            else\n            ctrltxt = ctrltxt..[[\n            <text x=\"51%\" y=\"45%\" text-anchor=\"start\" fill=\"red\" stroke=\"white\" font-size=\"125%\" >ENGAGED</text>\n            ]]\n        end\n    end\n    if gearExtended then\n        ctrltxt= ctrltxt..[[\n        <text x=\"49%\" y=\"56%\" text-anchor=\"middle\" fill=\"red\" stroke=\"white\">G</text>\n        <circle cx=\"48%\" cy=\"55.5%\" r=\".5%\" stroke=\"none\" fill=\"green\" ></circle>\n        ]]\n    end\n    if hoverset > 0 then\n        ctrltxt= ctrltxt..[[\n        <text x=\"50%\" y=\"57%\" text-anchor=\"middle\" fill=\"red\" font-size=\"75%\" stroke=\"white\">]]..hoverset..[[/]]..hovermax..[[</text>\n        ]]\n    end\n    instructx = 2\n    instructy = 5\n    instructsp = 1.5\n    ctrltxt= ctrltxt..[[\n    <text x=\"]]..(instructx)..[[%\" y=\"]]..(3*instructsp + instructy)..[[%\"  text-anchor=\"left\"  fill=\"white\">Alt 3 Altitude Hold</text>\n    <text x=\"]]..(instructx)..[[%\" y=\"]]..(4*instructsp + instructy)..[[%\"  text-anchor=\"left\"  fill=\"white\">Alt 4 Stabilizer</text>\n    <text x=\"]]..(instructx)..[[%\" y=\"]]..(5*instructsp + instructy)..[[%\"  text-anchor=\"left\"  fill=\"white\">Alt 5 Autobrake Toggle</text>\n    <text x=\"]]..(instructx)..[[%\" y=\"]]..(6*instructsp + instructy)..[[%\"  text-anchor=\"left\"  fill=\"white\">Alt 6 Alt Hold +50</text>\n    <text x=\"]]..(instructx)..[[%\" y=\"]]..(7*instructsp + instructy)..[[%\"  text-anchor=\"left\"  fill=\"white\">Alt 7 Alt Hold -50</text>\n    <text x=\"]]..(instructx)..[[%\" y=\"]]..(8*instructsp + instructy)..[[%\"  text-anchor=\"left\"  fill=\"white\">Alt 8 Toggle Cruise </text>\n    ]]    \n\n    \n    pitchsvg = [[\n    <g fill=]]..pitchColor..[[ opacity=\"]]..opacity..[[\" transform=\"translate(0,]]..(2*p*sy/1000)..[[)\" stroke=\"white\" stroke-width=\"]]..lsize/fscale..[[%\" font-size=\"75%\" text-anchor=\"start\" font-weight=\"normal\"  >\n    <text x=\"35.5%\" y=\"50.5%\"  text-anchor=\"end\" >0</text>\n    <text x=\"35.5%\" y=\"52.5%\"  text-anchor=\"end\" >10</text>\n    <text x=\"35.5%\" y=\"54.5%\"  text-anchor=\"end\" >20</text>\n    <text x=\"35.5%\" y=\"56.5%\"  text-anchor=\"end\" >30</text>\n    <text x=\"35.5%\" y=\"58.5%\"  text-anchor=\"end\" >40</text>\n    <text x=\"35.5%\" y=\"60.5%\"  text-anchor=\"end\" >50</text>\n    <text x=\"35.5%\" y=\"62.5%\"  text-anchor=\"end\" >60</text>\n    <text x=\"35.5%\" y=\"64.5%\"  text-anchor=\"end\" >70</text>\n    <text x=\"35.5%\" y=\"66.5%\"  text-anchor=\"end\" >80</text>\n    <text x=\"35.5%\" y=\"68.5%\"  text-anchor=\"end\" >90</text>\n    <text x=\"35.5%\" y=\"32.5%\"  text-anchor=\"end\" >90</text>\n    <text x=\"35.5%\" y=\"34.5%\"  text-anchor=\"end\" >80</text>\n    <text x=\"35.5%\" y=\"36.5%\"  text-anchor=\"end\" >70</text>\n    <text x=\"35.5%\" y=\"38.5%\"  text-anchor=\"end\" >60</text>\n    <text x=\"35.5%\" y=\"40.5%\"  text-anchor=\"end\" >50</text>\n    <text x=\"35.5%\" y=\"42.5%\"  text-anchor=\"end\" >40</text>\n    <text x=\"35.5%\" y=\"44.5%\"  text-anchor=\"end\" >30</text>\n    <text x=\"35.5%\" y=\"46.5%\"  text-anchor=\"end\" >20</text>\n    <text x=\"35.5%\" y=\"48.5%\"  text-anchor=\"end\" >10</text>\n    <line x1=\"36%\" y1=\"50%\" x2=\"37%\" y2=\"50%\"></line>\n    <line x1=\"36%\" y1=\"52%\" x2=\"37%\" y2=\"52%\"></line>\n    <line x1=\"36%\" y1=\"54%\" x2=\"37%\" y2=\"54%\"></line>\n    <line x1=\"36%\" y1=\"56%\" x2=\"37%\" y2=\"56%\"></line>\n    <line x1=\"36%\" y1=\"58%\" x2=\"37%\" y2=\"58%\"></line>\n    <line x1=\"36%\" y1=\"60%\" x2=\"37%\" y2=\"60%\"></line>\n    <line x1=\"36%\" y1=\"62%\" x2=\"37%\" y2=\"62%\"></line>\n    <line x1=\"36%\" y1=\"64%\" x2=\"37%\" y2=\"64%\"></line>\n    <line x1=\"36%\" y1=\"66%\" x2=\"37%\" y2=\"66%\"></line>\n    <line x1=\"36%\" y1=\"68%\" x2=\"37%\" y2=\"68%\"></line>\n    <line x1=\"36%\" y1=\"48%\" x2=\"37%\" y2=\"48%\"></line>\n    <line x1=\"36%\" y1=\"46%\" x2=\"37%\" y2=\"46%\"></line>\n    <line x1=\"36%\" y1=\"44%\" x2=\"37%\" y2=\"44%\"></line>\n    <line x1=\"36%\" y1=\"42%\" x2=\"37%\" y2=\"42%\"></line>\n    <line x1=\"36%\" y1=\"40%\" x2=\"37%\" y2=\"40%\"></line>\n    <line x1=\"36%\" y1=\"38%\" x2=\"37%\" y2=\"38%\"></line>\n    <line x1=\"36%\" y1=\"36%\" x2=\"37%\" y2=\"36%\"></line>\n    <line x1=\"36%\" y1=\"34%\" x2=\"37%\" y2=\"34%\"></line>\n    <line x1=\"36%\" y1=\"32%\" x2=\"37%\" y2=\"32%\"></line>\n    <line x1=\"36%\" y1=\"70%\" x2=\"37%\" y2=\"70%\" opacity=\"0\"></line>                \n     </g>\n    <g fill=]]..pitchColor..[[ opacity=\"]]..opacity..[[\"fill=\"none\" stroke=\"white\" stroke-width=\"]]..lsize/fscale..[[%\" font-size=\"75%\" text-anchor=\"start\" font-weight=\"normal\"  >\n    \n    <line x1=\"36%\" y1=\"70%\" x2=\"37%\" y2=\"70%\" opacity=\"0\"></line>  \n    \n    </g>]]\n    rollsvg = [[\n    <g fill=]]..rollColor..[[ opacity=\"]]..opacity..[[\" stroke=\"white\" stroke-width=\"]]..lsize/fscale..[[%\" font-size=\"75%\" text-anchor=\"middle\" font-weight=\"normal\" >\n    <text x=\"50%\" y=\"20%\" fill=\"white\" >]]..r..[[</text>\n    <polygon fill=\"white\" points=\"]]..(.5*sx)..\",\"..(0.17*sy)..\" \"..(.495*sx)..\",\"..(0.18*sy)..\" \"..(.505*sx)..\",\"..(0.18*sy)..[[\" transform=\"rotate(]]..(r/2)..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></polygon>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(5,]]..(sx/2)..[[,]]..(sy/2)..[[)\">10</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(5,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(10,]]..(sx/2)..[[,]]..(sy/2)..[[)\">20</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(10,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(15,]]..(sx/2)..[[,]]..(sy/2)..[[)\">30</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(15,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(20,]]..(sx/2)..[[,]]..(sy/2)..[[)\">40</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(20,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(25,]]..(sx/2)..[[,]]..(sy/2)..[[)\">50</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(25,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(30,]]..(sx/2)..[[,]]..(sy/2)..[[)\">60</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(30,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(35,]]..(sx/2)..[[,]]..(sy/2)..[[)\">70</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(35,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(40,]]..(sx/2)..[[,]]..(sy/2)..[[)\">80</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(40,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(45,]]..(sx/2)..[[,]]..(sy/2)..[[)\">90</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(45,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    \n    <text x=\"50%\" y=\"15%\" transform=\"rotate(0,]]..(sx/2)..[[,]]..(sy/2)..[[)\">0</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(0,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    \n    <text x=\"50%\" y=\"15%\" transform=\"rotate(-5,]]..(sx/2)..[[,]]..(sy/2)..[[)\">10</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-5,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(-10,]]..(sx/2)..[[,]]..(sy/2)..[[)\">20</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-10,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\"\" transform=\"rotate(-15,]]..(sx/2)..[[,]]..(sy/2)..[[)\">30</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-15,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(-20,]]..(sx/2)..[[,]]..(sy/2)..[[)\">40</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-20,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(-25,]]..(sx/2)..[[,]]..(sy/2)..[[)\">50</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-25,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(-30,]]..(sx/2)..[[,]]..(sy/2)..[[)\">60</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-30,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(-35,]]..(sx/2)..[[,]]..(sy/2)..[[)\">70</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-35,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(-40,]]..(sx/2)..[[,]]..(sy/2)..[[)\">80</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-40,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>\n    <text x=\"50%\" y=\"15%\" transform=\"rotate(-45,]]..(sx/2)..[[,]]..(sy/2)..[[)\">90</text>\n    <line x1=\"50%\" y1=\"15.5%\" x2=\"50%\" y2=\"17%\" transform=\"rotate(-45,]]..(sx/2)..[[,]]..(sy/2)..[[)\"></line>   \n    \n    <line x1=\"30%\" y1=\"10%\" x2=\"70%\" y2=\"10%\" opacity=\"0\"> </line>\n    \n    </g>\n    ]]\n\n    if showatmo==true then\n        \n        returnatmo=[[\n        <g fill=\"none\" stroke=\"white\" text-anchor=\"start\" font-weight=\"bold\" opacity=\"]]..opacity..[[\">\n        <text x=\"62%\" y=\"56%\" font-size=\"125%\" text-anchor=\"end\" fill=\"white\" >Alt: ]]..alt..[[</text>\n        <line x1=\"50%\" y1=\"48%\" x2=\"50%\" y2=\"44%\"></line>\n        <line x1=\"50%\" y1=\"52%\" x2=\"50%\" y2=\"56%\"></line>\n        <line x1=\"38%\" y1=\"50%\" x2=\"48%\" y2=\"50%\"></line>\n        <line x1=\"52%\" y1=\"50%\" x2=\"62%\" y2=\"50%\"></line>\n        <text x=\"37.5%\" y=\"50.5%\" fill=\"white\" font-size=\"75%\" text-anchor=\"middle\" >]]..p..[[</text>\n        ]]..ctrltxt..atmoctrl..[[\n        <rect x=\"0\" y=\"0\" height=\"]]..(sy)..[[\" width=\"]]..(sx)..[[\" stroke=\"blue\" fill=\"none\"</rect>\n        \n        </g>\n        <g transform=\"rotate(]]..r..[[,]]..(sx/2)..[[,]]..(sy/2)..[[)\" fill=\"none\" stroke=\"blue\" opacity=\"]]..opacity..[[\" font-weight=\"bold\">\n        <circle cx=\"50%\" cy=\"50%\" r=\"1%\" ></circle>\n        <line x1=\"50%\" y1=\"47%\" x2=\"50%\" y2=\"49%\" ></line>\n        <line x1=\"50%\" y1=\"53%\" x2=\"50%\" y2=\"51%\"></line>\n        <line x1=\"45%\" y1=\"50%\" x2=\"49.5%\" y2=\"50%\"></line>\n        <line x1=\"55%\" y1=\"50%\" x2=\"50.5%\" y2=\"50%\"></line>\n        </g>\n        ]]..pitchsvg..rollsvg\n    else\n        returnatmo=[[\n        <g fill=\"none\" stroke=\"white\" text-anchor=\"start\" font-weight=\"bold\" font-size=\"100%\" opacity=\"]]..opacity..[[\" >\n        ]]..ctrltxt..[[\n        <text x=\"65%\" y=\"44%\" font-size=\"85%\" text-anchor=\"start\" fill=\"white\" >StopDist: ]]..stopdistancestring..[[</text>\n         <text x=\"65%\" y=\"46%\" font-size=\"85%\" text-anchor=\"start\" fill=\"white\" >StopTime: ]]..stoptimestring..[[</text>\n\n        <circle cx=\"50%\" cy=\"50%\" r=\"1%\" stroke=\"blue\" ></circle>\n        <rect x=\"0\" y=\"0\" height=\"]]..(sy)..[[\" width=\"]]..(sx)..[[\" stroke=\"none\" fill=\"none\"</rect>\n        \n        </g>]]\n    end\n    local xreturnsvg = [[<div style=\"\n            height:100%;\n            width:100%;\n            position:absolute;\n            top:0;\n            left:0;\n            \">\n            <svg height=\"]]..sy..[[\" width=\"]]..sx..[[\" stroke-width=\"]]..lsize/fscale..[[%\" font-size=\"]]..fsize*fscale..[[\">            \n            ]]..returnatmo..[[</svg></div>]]        \n    return xreturnsvg\nend\n\ndatabank.setStringValue(\"CTLR\", \"ON\")\ninit=true\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"\nif antigrav ~= nil then antigrav.hide() end\nif warpdrive ~= nil then warpdrive.hide() end\nif gyro ~= nil then gyro.hide() end\ncore.hide()\nNav.control.switchOffHeadlights()\n\ndatabank.setStringValue(\"CTLR\", \"OFF\")\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"--System Update\nNav:update()\ndistance = telemeter.getDistance()\nif (distance > 5 or distance == -1) then Nav.control.retractLandingGears()\n    else\n    Nav.control.extendLandingGears()\n    end\n\nHudSVG=\"\"\nif init==true then\n    HudSVG = drawHorizon()..svgBase..drawTankLevels(\"{\"..json.decode(atmofuel.getData()).percentage..\"}\", nNitron)\n    system.setScreen(HudSVG)\n    system.showScreen(hud_state)\nend\n\ndatabank.setStringValue(\"autobrake\", autobrake)\ndatabank.setStringValue(\"stabilizer\", stabilizer)\ndatabank.setStringValue(\"altHold\", altHold)\ndatabank.setStringValue(\"CruiseMode\", CruiseMode)\ndatabank.setIntValue(\"PitchDeg\", PitchDeg)\ndatabank.setIntValue(\"RollDeg\", RollDeg)\ndatabank.setIntValue(\"stabilizerHold\", stabilizerHold)\ndatabank.setIntValue(\"brakeInput\", brakeInput)\ndatabank.setIntValue(\"hoverset\",  Nav.axisCommandManager.targetGroundAltitude)\ndatabank.setIntValue(\"hovermax\", Nav.axisCommandManager.targetGroundAltitudeCapabilities[1])\ndatabank.setIntValue(\"ControlMasterModeId\", unit.getControlMasterModeId())\ndatabank.setIntValue(\"throttle\", math.floor(100*unit.getAxisCommandValue(0)))\ndatabank.setIntValue(\"cruiseset\", math.floor(unit.getAxisCommandValue(0)))\nif gearExtended then \n    databank.setIntValue(\"gearExtended\",1)\n    else\n    databank.setIntValue(\"gearExtended\",0)\n    end","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"2"},{"code":"\n\tgearExtended = not gearExtended\nif gearExtended then\n    Nav.control.extendLandingGears()\n    Nav.axisCommandManager:setTargetGroundAltitude(0)\n    stabilizer = \"OFF\"\n    altHold = \"OFF\"\nelse\n    Nav.control.retractLandingGears()\n    Nav.axisCommandManager:setTargetGroundAltitude(Nav.axisCommandManager.targetGroundAltitudeCapabilities[1])\n    end\n\n","filter":{"args":[{"value":"gear"}],"signature":"actionStart(gear)","slotKey":"-2"},"key":"3"},{"code":"if Nav.control.isAnyHeadlightSwitchedOn() == 1 then\n    Nav.control.switchOffHeadlights()\nelse\n    Nav.control.switchOnHeadlights()\nend\n","filter":{"args":[{"value":"light"}],"signature":"actionStart(light)","slotKey":"-2"},"key":"4"},{"code":"-- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu\n\nlocal pitchSpeedFactor = 0.8 --xport: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nlocal yawSpeedFactor =  1 --xport: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nlocal rollSpeedFactor = 1.5 --xport: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal brakeSpeedFactor = 3 --xport: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01\nlocal brakeFlatFactor = 1 --xport: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal autoRoll = false --xport: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)\nlocal autoRollFactor = 2 --xport: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01\n\nlocal turnAssist = true --xport: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is\nlocal turnAssistFactor = 2 --xport: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nlocal stabilizerthreshold = 5 --xport\nlocal maxPitchCorrection = 10 --export: [Atmo Only] Maximum pitch correction when autopitch is engaged. Higher number may result in greater oscillation\n\nspeed = 3.6*vec3(core.getVelocity()):len()\nif (stabilizer == \"ON\" or speed < autorollspeed )then\n    autoRoll = true\nelse\n    autoRoll = false\nend\n\n-- validate params\npitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)\nyawSpeedFactor = math.max(yawSpeedFactor, 0.01)\nrollSpeedFactor = math.max(rollSpeedFactor, 0.01)\ntorqueFactor = math.max(torqueFactor, 0.01)\nbrakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)\nbrakeFlatFactor = math.max(brakeFlatFactor, 0.01)\nautoRollFactor = math.max(autoRollFactor, 0.01)\nturnAssistFactor = math.max(turnAssistFactor, 0.01)\n\n-- final inputs\nlocal finalPitchInput = pitchInput + system.getControlDeviceForwardInput()\nlocal finalRollInput = rollInput + system.getControlDeviceYawInput()\nlocal finalYawInput = yawInput - system.getControlDeviceLeftRightInput()\nlocal finalBrakeInput = brakeInput\n\n-- Axis\nlocal worldVertical = vec3(core.getWorldVertical()) -- along gravity\nlocal constructUp = vec3(core.getConstructWorldOrientationUp())\nlocal constructForward = vec3(core.getConstructWorldOrientationForward())\nlocal constructRight = vec3(core.getConstructWorldOrientationRight())\nlocal constructVelocity = vec3(core.getWorldVelocity())\nlocal constructVelocityDir = vec3(core.getWorldVelocity()):normalize()\nlocal currentRollDeg = getRoll(worldVertical, constructForward, constructRight)\nlocal currentRollDegAbs = math.abs(currentRollDeg)\nlocal currentRollDegSign = utils.sign(currentRollDeg)\n--adding pitch\nlocal currentPitchDeg = -math.asin(constructForward:dot(worldVertical)) * constants.rad2deg\nlocal currentPitchDegAbs = math.abs(currentPitchDeg)\nlocal currentPitchDegSign = utils.sign(currentPitchDeg)\n--adding height check\nlocal holdheightvariance = stabilizerHold - math.floor(core.getAltitude())\n\n--Recoding stats\nPitchDeg = math.floor(currentPitchDegAbs)*currentPitchDegSign\nRollDeg = math.floor(currentRollDegAbs)*currentRollDegSign\n\n\n-- Rotation\nlocal constructAngularVelocity = vec3(core.getWorldAngularVelocity())\nlocal targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight\n                                + finalRollInput * rollSpeedFactor * constructForward\n                                + finalYawInput * yawSpeedFactor * constructUp\n\n-- In atmosphere?\nif worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then\n    local autoRollRollThreshold = 1.0\n    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling\n    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then\n        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit\n        if (rollPID == nil) then\n            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range\n        end\n        rollPID:inject(targetRollDeg - currentRollDeg)\n        local autoRollInput = rollPID:get()\n\n        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward\n    end\n    local turnAssistRollThreshold = 20.0\n    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing\n    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then\n        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range\n        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range\n\n        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)\n        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180\n        local rollVerticalRatio = 0\n        if rescaleRollDegAbs < 90 then\n            rollVerticalRatio = rescaleRollDegAbs / 90\n        elseif rescaleRollDegAbs < 180 then\n            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90\n        end\n\n        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio\n\n        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)\n        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio\n\n        targetAngularVelocity = targetAngularVelocity\n                            + turnAssistPitchInput * constructRight\n                            + turnAssistYawInput * constructUp\n    end\n    if (stabilizer == \"ON\" or 3.6*constructVelocity:len() < autostabspeed) then\n        local PitchCorrection = -currentPitchDeg\n        if (pitchPID == nil) then\n            pitchPID = pid.new(2 * 0.01, 0, 2 * 0.1) -- magic number tweaked to have a default factor in the 1-10 range\n        end\n        if utils.threshold(holdheightvariance, stabilizerthreshold) and altHold == \"ON\" then\n           PitchCorrection = utils.clamp(holdheightvariance / 5, -maxPitchCorrection,maxPitchCorrection) - currentPitchDeg\n        end\n        pitchPID:inject(PitchCorrection)\n        local autoPitchInput = pitchPID:get()\n        targetAngularVelocity = targetAngularVelocity + autoPitchInput * constructRight\n    end\nend\n\n-- Engine commands\nlocal keepCollinearity = 1 -- for easier reading\nlocal dontKeepCollinearity = 0 -- for easier reading\nlocal tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities\n\n-- Rotation\nlocal angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)\nlocal airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())\nangularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction\nNav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)\n\n-- Brakes\nlocal brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)\nif autobrake==\"ON\" then\n    brakeAcceleration = -(5*constructVelocity +3*constructVelocityDir)\n    end\n\nNav:setEngineForceCommand('brake', brakeAcceleration)\n\n-- AutoNavigation regroups all the axis command by 'TargetSpeed'\nlocal autoNavigationEngineTags = 'ECO'\nlocal autoNavigationAcceleration = vec3()\nlocal autoNavigationUseBrake = false\n\n-- Longitudinal Translation\n--local longitudinalEngineTags = 'thrust analog longitudinal'\nlocal longitudinalEngineTags = 'ECO'\nlocal longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byThrottle) then\n    if unit.getAxisCommandValue(0)==1 then \n        longitudinalEngineTags = longitudinalEngineTags..',PWR' \n        else\n        Nav:setEngineForceCommand('PWR', vec3(), keepCollinearity)\n    end\n    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)\n    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)\nelseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration\n    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop\n        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking\n    then\n        autoNavigationUseBrake = true\n    end\n\nend\n\n-- Lateral Translation\nlocal lateralStrafeEngineTags = 'thrust analog lateral'\nlocal lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)\nif (lateralCommandType == axisCommandType.byThrottle) then\n    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)\n    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)\nelseif  (lateralCommandType == axisCommandType.byTargetSpeed) then\n    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration\nend\n\n-- Vertical Translation\nlocal verticalStrafeEngineTags = 'thrust analog vertical'\nlocal verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)\nif (verticalCommandType == axisCommandType.byThrottle) then\n    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)\n    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)\nelseif  (verticalCommandType == axisCommandType.byTargetSpeed) then\n    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration\nend\n\n-- Auto Navigation (Cruise Control)\nif (autoNavigationAcceleration:len() > constants.epsilon) then\n    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward\n    then\n        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'\n    end\n    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)\nend","filter":{"args":[],"signature":"flush()","slotKey":"-2"},"key":"5"},{"code":"pitchInput = pitchInput + 1","filter":{"args":[{"value":"forward"}],"signature":"actionStop(forward)","slotKey":"-2"},"key":"6"},{"code":"pitchInput = pitchInput - 1","filter":{"args":[{"value":"forward"}],"signature":"actionStart(forward)","slotKey":"-2"},"key":"7"},{"code":"pitchInput = pitchInput + 1","filter":{"args":[{"value":"backward"}],"signature":"actionStart(backward)","slotKey":"-2"},"key":"8"},{"code":"pitchInput = pitchInput - 1","filter":{"args":[{"value":"backward"}],"signature":"actionStop(backward)","slotKey":"-2"},"key":"9"},{"code":"rollInput = rollInput - 1","filter":{"args":[{"value":"left"}],"signature":"actionStart(left)","slotKey":"-2"},"key":"10"},{"code":"rollInput = rollInput + 1","filter":{"args":[{"value":"left"}],"signature":"actionStop(left)","slotKey":"-2"},"key":"11"},{"code":"rollInput = rollInput + 1","filter":{"args":[{"value":"right"}],"signature":"actionStart(right)","slotKey":"-2"},"key":"12"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)","filter":{"args":[{"value":"straferight"}],"signature":"actionStart(straferight)","slotKey":"-2"},"key":"13"},{"code":"rollInput = rollInput - 1","filter":{"args":[{"value":"right"}],"signature":"actionStop(right)","slotKey":"-2"},"key":"14"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)","filter":{"args":[{"value":"straferight"}],"signature":"actionStop(straferight)","slotKey":"-2"},"key":"15"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)","filter":{"args":[{"value":"strafeleft"}],"signature":"actionStop(strafeleft)","slotKey":"-2"},"key":"16"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)","filter":{"args":[{"value":"strafeleft"}],"signature":"actionStart(strafeleft)","slotKey":"-2"},"key":"17"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)\nNav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)\n","filter":{"args":[{"value":"up"}],"signature":"actionStop(up)","slotKey":"-2"},"key":"18"},{"code":"Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()\nNav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)\n","filter":{"args":[{"value":"down"}],"signature":"actionStart(down)","slotKey":"-2"},"key":"19"},{"code":"Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()\nNav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)\n","filter":{"args":[{"value":"up"}],"signature":"actionStart(up)","slotKey":"-2"},"key":"20"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"actionStart(groundaltitudeup)","slotKey":"-2"},"key":"21"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)\nNav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)\n","filter":{"args":[{"value":"down"}],"signature":"actionStop(down)","slotKey":"-2"},"key":"22"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"actionLoop(groundaltitudeup)","slotKey":"-2"},"key":"23"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"actionStart(groundaltitudedown)","slotKey":"-2"},"key":"24"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"actionLoop(groundaltitudedown)","slotKey":"-2"},"key":"25"},{"code":"yawInput = yawInput - 1","filter":{"args":[{"value":"yawright"}],"signature":"actionStart(yawright)","slotKey":"-2"},"key":"26"},{"code":"yawInput = yawInput - 1","filter":{"args":[{"value":"yawleft"}],"signature":"actionStop(yawleft)","slotKey":"-2"},"key":"27"},{"code":"yawInput = yawInput + 1","filter":{"args":[{"value":"yawleft"}],"signature":"actionStart(yawleft)","slotKey":"-2"},"key":"28"},{"code":"yawInput = yawInput + 1","filter":{"args":[{"value":"yawright"}],"signature":"actionStop(yawright)","slotKey":"-2"},"key":"29"},{"code":"brakeInput = brakeInput + 1\nlocal longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end\nend\n","filter":{"args":[{"value":"brake"}],"signature":"actionStart(brake)","slotKey":"-2"},"key":"30"},{"code":"brakeInput = brakeInput - 1","filter":{"args":[{"value":"brake"}],"signature":"actionStop(brake)","slotKey":"-2"},"key":"31"},{"code":"local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end\nend\n","filter":{"args":[{"value":"brake"}],"signature":"actionLoop(brake)","slotKey":"-2"},"key":"32"},{"code":"Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)","filter":{"args":[{"value":"stopengines"}],"signature":"actionStart(stopengines)","slotKey":"-2"},"key":"33"},{"code":"Nav:toggleBoosters()","filter":{"args":[{"value":"booster"}],"signature":"actionStart(booster)","slotKey":"-2"},"key":"34"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)","filter":{"args":[{"value":"speedup"}],"signature":"actionStart(speedup)","slotKey":"-2"},"key":"35"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)","filter":{"args":[{"value":"speeddown"}],"signature":"actionStart(speeddown)","slotKey":"-2"},"key":"36"},{"code":"Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)","filter":{"args":[{"value":"speedup"}],"signature":"actionLoop(speedup)","slotKey":"-2"},"key":"37"},{"code":"Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)","filter":{"args":[{"value":"speeddown"}],"signature":"actionLoop(speeddown)","slotKey":"-2"},"key":"38"},{"code":"if antigrav ~= nil then antigrav.toggle() end","filter":{"args":[{"value":"antigravity"}],"signature":"actionStart(antigravity)","slotKey":"-2"},"key":"39"},{"code":"ChangeCruise()","filter":{"args":[{"value":"option8"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"40"},{"code":"stabilizerHold = stabilizerHold - 50","filter":{"args":[{"value":"option7"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"41"},{"code":"stabilizerHold = stabilizerHold + 50","filter":{"args":[{"value":"option6"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"42"},{"code":"if autobrake == \"OFF\" then\n    autobrake = \"ON\"\n    brakeInput = brakeInput + 1\nelse\n    autobrake = \"OFF\"\n    brakeInput = brakeInput - 1\nend\n","filter":{"args":[{"value":"option5"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"43"},{"code":"if stabilizer == \"OFF\" then\n    stabilizer = \"ON\"\nelse\n    stabilizer = \"OFF\"\n    altHold = \"OFF\"\n\nend","filter":{"args":[{"value":"option4"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"44"},{"code":"if altHold == \"OFF\" then\n    altHold = \"ON\"\n    stabilizer = \"ON\"\n    stabilizerHold = math.floor(core.getAltitude())\n\nelse\n    altHold = \"OFF\"\n\nend","filter":{"args":[{"value":"option3"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"45"}],"methods":[],"events":[]}
